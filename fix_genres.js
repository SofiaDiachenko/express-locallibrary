// fix_genres.js

const mongoose = require('mongoose');
const Author = require('./models/author');
const Genre = require('./models/genre');
const Book = require('./models/book');

mongoose.connect('mongodb://localhost/local_library', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

async function fixReferences() {
  try {
    // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –∫–Ω–∏–∂–æ–∫, –¥–µ –ø–æ–ª–µ author —Ç–∞ genre —î —Ä—è–¥–∫–æ–º (string).
    const booksToFix = await Book.find({
      $or: [
        { author: { $type: 'string' } },
        { genre: { $type: 'string' } },
      ],
    });

    for (const book of booksToFix) {
      // –Ø–∫—â–æ author —î —Ä—è–¥–∫–æ–º, —Ç–æ –∑–Ω–∞–π–¥–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –∑–∞ —ñ–º'—è–º —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏–º–æ –Ω–∞ ObjectId
      if (typeof book.author === 'string') {
        const author = await Author.findOne({ name: book.author });

        if (author) {
          book.author = author._id; // –ó–∞–º—ñ–Ω–∞ —Ä—è–¥–∫–∞ –Ω–∞ ObjectId –∞–≤—Ç–æ—Ä–∞
        } else {
          console.log(`–ê–≤—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π: ${book.author}`);
        }
      }

      // –Ø–∫—â–æ genre —î —Ä—è–¥–∫–æ–º, —Ç–æ –∑–Ω–∞–π–¥–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∂–∞–Ω—Ä —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏–º–æ –Ω–∞ ObjectId
      if (typeof book.genre === 'string') {
        const genre = await Genre.findOne({ name: book.genre });

        if (genre) {
          book.genre = genre._id; // –ó–∞–º—ñ–Ω–∞ —Ä—è–¥–∫–∞ –Ω–∞ ObjectId –∂–∞–Ω—Ä—É
        } else {
          console.log(`–ñ–∞–Ω—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π: ${book.genre}`);
        }
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –∫–Ω–∏–≥—É
      await book.save();
      console.log(`‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –ö–Ω–∏–≥–∞ "${book.title}"`);
    }

    console.log('üéâ –í—Å—ñ –∫–Ω–∏–≥–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.');
    mongoose.connection.close();
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', err);
    mongoose.connection.close();
  }
}

fixReferences();
